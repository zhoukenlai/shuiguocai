package ken.lai;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileOutputStream;import java.util.List;import com.baidu.mobads.InterstitialAd;import com.umeng.analytics.MobclickAgent;import android.app.Activity;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.hardware.Camera;import android.hardware.Camera.Size;import android.hardware.Camera.PictureCallback;import android.hardware.Camera.AutoFocusCallback;import android.os.Bundle;import android.os.Environment;import android.view.KeyEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.Toast;public class StorageBoxActivity extends Activity implements		SurfaceHolder.Callback {	private Camera mCamera;	private SurfaceHolder mSurfaceHolder; // SurfaceView的控制类	private SurfaceView mSurfaceView;	public Button bOK;	public Button bSave;	public Button bCancel;	public Button bExit;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);				// 设置全屏        requestWindowFeature(Window.FEATURE_NO_TITLE);		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN ,  				WindowManager.LayoutParams.FLAG_FULLSCREEN);		setContentViewCamera();				interAd=new InterstitialAd(this);		interAd.loadAd();						// 初始化摄像头		Thread thread = new Thread(runnable);		thread.start();		iAdShow();	}	    public InterstitialAd interAd;    public void iAdShow()    {    	if(interAd.isAdReady()){    		interAd.showAd(this);		}else{			interAd.loadAd();		}    }		@SuppressWarnings("deprecation")	void setContentViewCamera()	{		setContentView(R.layout.main);		mSurfaceView = (SurfaceView) findViewById(R.id.surface);		//mSurfaceView.setZOrderOnTop(true);		bOK = (Button) findViewById(R.id.bOK);		bSave = (Button) findViewById(R.id.bSave);		bCancel = (Button) findViewById(R.id.bCancel);		bExit = (Button) findViewById(R.id.bExit);				bOK.setOnClickListener(new OKLintener());		bSave.setOnClickListener(new SaveLintener());		bCancel.setOnClickListener(new CancelLintener());		bExit.setOnClickListener(new ExitLintener());		mSurfaceHolder = mSurfaceView.getHolder();		mSurfaceHolder.addCallback(this); // 设置回调		mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);	}		class OKLintener implements OnClickListener    {		@Override		public void onClick(View arg0) {			// 拍照			if ( mCamera==null )				exit();			doOK();		}	}		class SaveLintener implements OnClickListener    {		@Override		public void onClick(View arg0) {			// 保存图片			if ( mCamera==null )				exit();			doSave();			mCamera.startPreview();		}	}		class CancelLintener implements OnClickListener    {		@Override		public void onClick(View arg0) {			if ( mCamera==null )				exit();			i = 0;			mCamera.startPreview();		}	}		void exit()	{		Intent intent = new Intent(this,CaicaiActivity.class);		startActivity(intent);		this.finish();	}		class ExitLintener implements OnClickListener    {		@Override		public void onClick(View arg0) {			exit();		}	}		@Override	public void surfaceChanged(SurfaceHolder holder, int format, int width,			int height) {	}	@Override	public void surfaceCreated(SurfaceHolder holder) {			}	@Override	public void surfaceDestroyed(SurfaceHolder holder) {		// TODO Auto-generated method stub	}		private AutoFocusCallback mAutoFocusCallBack = new AutoFocusCallback() {		@Override		public void onAutoFocus(boolean success, Camera camera) {							if (success) {			}		}	};		private void InitCamera() {		mCamera = Camera.open();		if (mCamera != null) {			try {				mCamera.setPreviewDisplay(mSurfaceHolder);				//mCamera.setDisplayOrientation(90); // 注意： 该方法实现摄像头90度旋转(摄像头默认是横的) 需2.2及以上版本								/* 创建Camera.Parameters对象 */			    Camera.Parameters parameters = mCamera.getParameters();			         			    /* 设置相片格式为JPEG */			    //parameters.setPictureFormat(PixelFormat.JPEG);			         			    /* 指定preview的屏幕大小 */			    List<Size> mSupportedPreviewSizes;			    mSupportedPreviewSizes = parameters.getSupportedPreviewSizes();			    //Size mPreviewSize = getOptimalPreviewSize(mSupportedPreviewSizes, 640, 480);			    for (Size size : mSupportedPreviewSizes)			    {			    	parameters.setPreviewSize(size.width, size.height);			    	break;			    }			    			    List<Size> aa = parameters.getSupportedPictureSizes(); 			    for (Size size : aa)			    {			    	parameters.setPictureSize(size.width, size.height);			    	break;			    }			         			    /* 设置图片分辨率大小 */			    //parameters.setPictureSize(1000, 2000);			         			    /* 将Camera.Parameters设置予Camera */			    mCamera.setParameters(parameters);			    				mCamera.startPreview();								//String sFocusMode = mCamera.getParameters().getFocusMode();							} catch (Exception e) {				// TODO: handle exception			}		}	}		@Override	protected void onPause()	{		super.onPause();		MobclickAgent.onPause(this);		if (mCamera != null)		{			mCamera.stopPreview();			mCamera.release();			mCamera = null;		}	}		public void onResume() {        super.onResume();        MobclickAgent.onResume(this);    }		public int i=0;	void doOK() {		if ( i==1 )			return;		i = 1;		// 初始化成功后就可以进行拍照了，拍照函数依然是通过调用camera类的函数来实现		Camera.Parameters parameters = mCamera.getParameters();		String FM = parameters.getFocusMode();		if ( FM.equals(Camera.Parameters.FOCUS_MODE_AUTO) 				|| FM.equals(Camera.Parameters.FOCUS_MODE_MACRO) )			mCamera.autoFocus(mAutoFocusCallBack);				try {            Thread.sleep(500);// 睡眠指定毫秒数        } catch (Exception e) {// 捕获异常            e.printStackTrace();// 打印堆栈信息        }		mCamera.takePicture(null, null, jpegCallback);		// 只需实现jpegCallback这个回调函数来就行解码、保存即可，前2个参数可以直接设为null，不过系统一般会自动帮你把这些都写进来的			}	 		public int iSEQ = 1;	void doSave() {		i = 0;		/* onPictureTaken传入的第一个参数即为相片的byte */		if ( m_data == null )			return;		Bitmap bm = BitmapFactory.decodeByteArray(m_data, 0, m_data.length);		if ( bm == null )			return;				/* 创建新文件 */		// create a File object for the parent directory 		File fDirectory = new File(Environment.getExternalStorageDirectory().getPath()+"/caicai/");		// have the object build the directory structure, if needed. 		fDirectory.mkdirs(); 				String picname = "card"+iSEQ+".jpg";// 要保存在哪里，路径你自己设		iSEQ++;		File myCaptureFile = new File(fDirectory,picname);		try {			BufferedOutputStream bos = new BufferedOutputStream(					new FileOutputStream(myCaptureFile));						/* 采用压缩转档方法 */			bm.compress(Bitmap.CompressFormat.JPEG, 80, bos);						/* 调用flush()方法，更新BufferStream */			bos.flush();						/* 结束OutputStream */			bos.close();			/* 将拍照下来且存储完毕的图文件，显示出来 */			// mImageView01.setImageBitmap(bm);			iAdShow();		} catch (Exception e) {			Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();		}		}			private PictureCallback jpegCallback = new PictureCallback() {		public void onPictureTaken(byte[] _data, Camera _camera) {			m_data = _data;		}	};		public byte[] m_data;		public boolean onKeyDown(int keyCode, KeyEvent event) {        if(keyCode == KeyEvent.KEYCODE_BACK){        	exit();        	return true;			//return super.onKeyDown(keyCode, event);        }        else         {        	return super.onKeyDown(keyCode, event);        }    }		Runnable runnable = new Runnable() {		@Override		public void run() {			try {				Thread.sleep(10);			} catch (InterruptedException e) {				e.printStackTrace();			}			InitCamera();		}	};	}